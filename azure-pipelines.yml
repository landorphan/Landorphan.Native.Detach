# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  NUGET_AUTHORS: 'Landorphan LLC, Michael Prochaska, Timothy Stockstill'
  NUGET_OWNERS: 'landorphan, mprochaska, tstockstill'
  NUGET_LICENSE: 'MIT'
  NUGET_COPYRIGHT: 'Copyright Â© 2019 - Landorphan, LLC.'

jobs:
- job: determine_major_minor
  displayName: Determine Build Major/Minor Version
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: |
        SEM_SHORT=$(cat version.txt | sed -En 's/([0-9]+\.[0-9]+).*/\1/p');
        MONIKER="$BUILD_REPOSITORY_URI|$SEM_SHORT"
        echo "##vso[task.setvariable variable=versionMoniker;isOutput=true;]$MONIKER"
        echo "Moniker now set to: $MONIKER"
      displayName: Compute Build Version Moniker
      name: compute_moniker
- job: determine_patch
  displayName: Compute Build Version Patch
  dependsOn: [ 'determine_major_minor' ]
  variables:
    VERSION_MONIKER: $[ dependencies.determineMajorMinor.outputs['computeMoniker.versionMoniker'] ]
    SEM_PATCH: $[counter(variables['VERSION_MONIKER'], 0)]
  steps:
      - script: |
          printenv;
          echo "Version Moniker: $VERSION_MONIKER";
          echo "Version Patch: $SEM_PATCH";
        displayName: Output Version Moniker
      - script: |
          SEM_SHORT=$(cat version.txt | sed -En 's/([0-9]+\.[0-9]+).*/\1/p');
          SEM_LONG="$SEM_SHORT.$SEM_PATCH";
          echo "##vso[task.setvariable variable=SEM_PATCH]$SEM_PATCH"
          echo "##vso[task.setvariable variable=SEM_SHORT]$SEM_SHORT"
          echo "##vso[task.setvariable variable=SEM_LONG]$SEM_LONG"
        displayName: Compute Short and Long Forms
      - powershell: |
          $Env:SEM_QUALIFIER = '-local';
          if ($Env:BUILD_SOURCEBRANCHNAME -eq 'develop')
          {
            $Env:SEM_QUALIFIER = '-prerelease';
          }
          elseif ($Env:BUILD_SOURCEBRANCHNAME -eq 'main' -or $Env:BUILD_SOURCEBRANCHNAME -eq 'master')
          {
            $Env:SEM_QUALIFIER = '';
          }
          $Env:SEM_SHORT="$(SEM_SHORT)";
          $Env:SEM_PATCH="$(SEM_PATCH)";
          $Env:SEM_LONG="$(SEM_LONG)";
          Get-ChildItem Env:
          $Env:SEM_HASH = $Env:BUILD_SOURCEVERSION.SubString(0, 7);
          echo "##vso[task.setvariable variable=SEM_HASH]$Env:SEM_HASH"
          $Env:SEM_QUALIFIED="$Env:SEM_LONG$Env:SEM_QUALIFIER";
          $Env:SEM_HASHED = "$Env:SEM_LONG$Env:SEM_QUALIFIER+$Env:SEM_HASH";
          echo "$Env:SEM_HASHED";
          echo "##vso[task.setvariable variable=SEM_HASHED]$Env:SEM_HASHED"
          mkdir "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version"
          echo "$Env:SEM_HASHED" > "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/hashed.txt";
          echo "$Env:SEM_HASHED-debug" > "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/debug.txt";
          echo "$Env:SEM_HASHED-release" > "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/release.txt";
          # Create bash version source file
          echo "export SEM_SHORT=""$Env:SEM_SHORT""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_PATCH=""$Env:SEM_PATCH""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_LONG=""$Env:SEM_LONG""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_QUALIFIER=""$Env:SEM_QUALIFIER""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_QUALIFIED=""$Env:SEM_QUALIFIED""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_HASH=""$Env:SEM_HASH""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_HASHED=""$Env:SEM_HASHED""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_CONFIG_DEBUG=""$Env:SEM_HASHED-debug""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_CONFIG_RELEASE=""$Env:SEM_HASHED-release""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_CONFIG_AWS=""$Env:SEM_HASHED-aws""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          echo "export SEM_CONFIG_AZURE=""$Env:SEM_HASHED-azure""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh";
          # Create yaml version file
          echo "version:" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- short: $Env:SEM_SHORT" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- patch: $Env:SEM_PATCH" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- long: $Env:SEM_LONG" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- qualifier: $Env:SEM_QUALIFIER" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- qualified: $Env:SEM_QUALIFIED" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- hash: $Env:SEM_HASH" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          echo "- hashed: $Env:SEM_HASHED" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.yaml";
          # Create json version file
          echo "{" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "  ""version"": { " >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""short"": ""$Env:SEM_SHORT""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""patch"": ""$Env:SEM_PATCH""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""long"": ""$Env:SEM_LONG""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""qualifier"": ""$Env:SEM_QUALIFIER""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""qualified"": ""$Env:SEM_QUALIFIED""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""hash"": ""$Env:SEM_HASH""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""hashed"": ""$Env:SEM_HASHED""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""configuration"": ""{configuration}""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""configured"": ""{configured}""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""runtime"": ""{runtime}""," >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "    ""full"": ""{full}""" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          echo "}}" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.json";
          # Create text version file
          echo "SEM_SHORT: $Env:SEM_SHORT" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_PATCH: $Env:SEM_PATCH" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_LONG: $Env:SEM_LONG" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_QUALIFIER: $Env:SEM_QUALIFIER" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_QUALIFIED: $Env:SEM_QUALIFIED" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_HASH: $Env:SEM_HASH" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_HASHED: $Env:SEM_HASHED" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_CONFIG_DEBUG: $Env:SEM_HASHED-debug" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_CONFIG_RELEASE: $Env:SEM_HASHED-release" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_CONFIG_AWS: $Env:SEM_HASHED-aws" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
          echo "SEM_CONFIG_AZURE: $Env:SEM_HASHED-azure" >> "$Env:BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.txt";
        displayName: Compute Qualifier
      - bash: |
          . "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.sh"
          echo "\$Env:SEM_SHORT=\"$SEM_SHORT\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_PATCH=\"$SEM_PATCH\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_LONG=\"$SEM_LONG\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_QUALIFIER=\"$SEM_QUALIFIER\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_QUALIFIED=\"$SEM_QUALIFIED\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_HASH=\"$SEM_HASH\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_HASHED=\"$SEM_HASHED\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_CONFIG_DEBUG=\"$SEM_HASHED-debug\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_CONFIG_RELEASE=\"$SEM_HASHED-release\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_CONFIG_AWS=\"$SEM_HASHED-aws\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
          echo "\$Env:SEM_CONFIG_AZURE=\"$SEM_HASHED-azure\"" >> "$BUILD_ARTIFACTSTAGINGDIRECTORY/version/version.ps1";
        displayName: Create PowerShell version source file
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/version'
          ArtifactName: 'version'
          publishLocation: 'Container'
- job: macos_build
  displayName: MacOS Build
  dependsOn: []
  pool:
    vmImage: 'macOS-latest'
  steps:
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'Landorphan Holdings (1286ed67-15ce-4500-899e-e79313d8329f)'
        KeyVaultName: 'landorphan-build'
        SecretsFilter: '*'
        RunAsPreJob: true
      displayName: 'Download Key Vault Secrets'
    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: 'Landorphan_Apple_Developer_ID.p12'
        certPwd: '$(Landorphan-Apple-Developer-ID-PWD)'
        keychain: 'temp'
      displayName: 'Install Apple Code Signing Certificate'
    # - task: InstallAppleProvisioningProfile@1
    #   inputs:
    #     provisioningProfileLocation: 'secureFiles'
    #     provProfileSecureFile: 'Landorphan_Native_Detach_Module_Release.provisionprofile'
    - script: security find-identity -v -p codesigning
      displayName: 'Display Currently Installed Code Signing Certificates'
    - script: xcodebuild -showsdks
      displayName: 'Show all SDKs'
    - script: mkdir '$(Build.SourcesDirectory)/cmake-build-macos-release'
      displayName: 'Make cMake directory'
    - task: Xcode@5
      inputs:
        actions: 'build'
        configuration: 'Release'
        packageApp: false
        sdk: macosx11.0
        signingOption: 'manual'
        signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
        exportPath: '$(Build.SourcesDirectory)/cmake-build-macos-release'
#        provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
        destinationPlatformOption: 'macOS'
    # - script: cmake -Bcmake-build-macos-release -H. -DCMAKE_BUILD_TYPE=release
    #   displayName: Generate Make Files
    # - script: cmake --build cmake-build-macos-release --target all
    #   displayName: Build Project
    - script: find .
      displayName: List Build Sources Directory
    - task: CopyFiles@2
      displayName: 'Move Files to Staging Directory: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/cmake-build-macos-release'
        Contents: 'detach'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'macos'
        publishLocation: 'Container'

- job: linux_build
  displayName: Linux Build
  dependsOn: []
  pool:
    vmImage: 'ubuntu-16.04'
  steps: 
    - script: cmake -Bcmake-build-linux-release -H. -DCMAKE_BUILD_TYPE=release
      displayName: Generate Make Files
    - script: cmake --build cmake-build-linux-release --target all
      displayName: Build Project
    - task: CopyFiles@2
      displayName: 'Move Files to Staging Directory: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/cmake-build-linux-release'
        Contents: 'detach'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'linux'
        publishLocation: 'Container'

- job: nuget_pack
  displayName: Nuget Package
  dependsOn: [ linux_build, macos_build, determine_patch ]
  pool:
    vmImage: 'windows-latest'
  steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'version'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: Downloading Version Info (from previous stage)
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'linux'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: Downloading Linux Binaries (from previous stage)
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'macos'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: Downloading MacOS Binaries (from previous stage)
    - script: 'mkdir $(Build.SourcesDirectory)\cmake-build-nuget-release'
      displayName: Creating Nuget Build Directory
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.ArtifactsDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)\cmake-build-nuget-release'
      displayName: Copy Linux Binaries
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.ArtifactsDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)\cmake-build-nuget-release'
      displayName: Copy MacOS Binaries
    - script: 'dir $(System.ArtifactsDirectory)'
      displayName: Display Downloaded Items
    # - bash: |
    #     cp -r '$(System.ArtifactsDirectory)' '$(Build.SourcesDirectory)/cmake-build-nuget-release'
    - powershell: |
        cat "$(System.ArtifactsDirectory)\version\version.ps1"
        . "$(System.ArtifactsDirectory)\version\version.ps1"
        ls -R "$(Build.SourcesDirectory)"
        nuget pack "$(Build.SourcesDirectory)\Landorphan.Native.Detach.nuspec" -Version $Env:SEM_HASHED -OutputDirectory '$(Build.SourcesDirectory)\cmake-build-nuget-release'
      displayName: Build Nuget Package
    - task: CopyFiles@2
      displayName: 'Move Files to Staging Directory: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/cmake-build-nuget-release'
        Contents: '*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'nuget'
        publishLocation: 'Container'    
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '45ce0ca0-9389-479b-bb31-8e9d8fb585b1/009f08c1-c46e-454f-8372-444287c1d732'